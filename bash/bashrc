# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# use a color prompt if terminal is good for it
case "$TERM" in
  xterm) color_prompt=yes;;
  xterm-color) color_prompt=yes;;
esac

if [ "$color_prompt" = yes ]; then
  LIGHT_GREEN="\[\033[0;32m\]"
  RED="\[\033[1;31m\]"
  if [ `/bin/hostname -s` = "hod" ] ; then
    hcolor=$LIGHT_GREEN
  elif [ `/bin/hostname -s` = "splinter" ] ; then
    hcolor=$RED
  else
    hcolor="\[\e[38;5;$((48 + $(hostname | cksum | cut -c1-3) % 170))m\]"
  fi
  PS1="$hcolor\h\[\033[00m\]:\w\$ "
else
  PS1='\h:\w\$ '
fi

# Show username only if it's not "marco"
test "$(whoami)" != 'marco' && PS1="\u@$PS1"

# Add chroot info if needed
PS1="${debian_chroot:+($debian_chroot)}$PS1"

unset color_prompt force_color_prompt

alias ls='ls --color=auto'
alias grep='grep --color=auto'
alias ll='ls -l --ignore=*.pyc'
alias rd='cd `pwd -P`'
alias whois='whois -H'

# commands for manipulating the PATH variable
# (source: http://stackoverflow.com/questions/370047)
path_append ()  { path_remove $1; export PATH="$PATH:$1"; }
path_prepend () { path_remove $1; export PATH="$1:$PATH"; }
path_remove ()  { export PATH=`echo -n $PATH | awk -v RS=: -v ORS=: '$0 != "'$1'"' | sed 's/:$//'`; }

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# alias for simple http-server
alias http-server='python -m SimpleHTTPServer'

title () { echo -e '\e]2;'$1'\a'; }

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if [ -d ~/local ]; then
    path_prepend $HOME/local/bin
    export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH
    # export PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig:/usr/lib/pkgconfig
fi

#export HISTIGNORE="&:ls:ls -l"
export EDITOR=vim

if [ -f "$HOME/local/bin/virtualenvwrapper.sh" ]; then
    source $HOME/local/bin/virtualenvwrapper.sh
fi

if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

# MDA 2/18/2011 - Commented to decrease shell loading time
#if [ -f /etc/bash_completion ] && shopt -oq posix; then
#  . /etc/bash_completion
#fi

# pip bash completion
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

# set PYTHONSTARTUP
export PYTHONSTARTUP=$HOME/.pythonrc

# node.js
# taken from http://stackoverflow.com/questions/10081293/
export NPM_PACKAGES="$HOME/.npm-packages"
path_prepend "$NPM_PACKAGES/bin"
unset MANPATH
export MANPATH="$NPM_PACKAGES/share/man:$(manpath)"
export NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"

# hostname completion
# from: http://www.commandlinefu.com/commands/view/2766/ssh-autocomplete
complete -W "$(echo $(tail ~/.bash_history -n 1000 | grep '^ssh ' | sort -u | sed 's/^ssh //'))" ssh
# hostname completion end

# easy unpacking
unp() {
  if [ x == x$1 ]; then
    echo 'usage: unp [filename]'
  elif [ -f "$1" ]; then
    case "$1" in
      *.tar.gz) tar xvzf "$1" ;;
      *.tgz) tar xvzf "$1" ;;
      *.tar.bz2) tar xvjf "$1" ;;
      *.gz) gunzip "$1" ;;
      *.bz2) bunzip2 "$1" ;;
      *.tar) tar zvf "$1" ;;
      *.zip|*.egg|*.jar) unzip "$1" ;;
      *) echo "'$1' is an unknown archive" ;;
    esac
  else
    echo "'$1' is not a valid archive"
  fi
}

# console frequency analysis
# inspired by http://matt.might.net/articles/console-hacks-exploiting-frequency/
alias frequency="sort | uniq -c | sort -rn"
alias show_command_frequency="cat ~/.bash_history | cut -d' ' -f1 | frequency | head -n 20"
alias show_full_command_frequency="cat ~/.bash_history | frequency | head -n 20"

# taken from http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
function pdfpextr()
{
  # this function uses 3 arguments:
  #     $1 is the first page of the range to extract
  #     $2 is the last page of the range to extract
  #     $3 is the input file
  #     output file will be named
  #     "inputfile_pXX-pYY.pdf"
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
  -dFirstPage=${1} \
  -dLastPage=${2} \
  -sOutputFile=${3%.pdf}_p${1}-p${2}.pdf \
  ${3}
}

# by marco, modeled after pdfpextr
function pdfmerge()
{
  # this function uses arguments:
  #   $1 is the name of the output file
  #   $2+ are the names of the input files
  OUT=${1}
  shift
  gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
  -sOutputFile=$OUT \
  $@
}


check_distro() {
  if [ -f "/usr/bin/lsb_release" ]; then
    lsb_release -ds
  else
    cat /etc/*release
  fi
  uname -m
}

# From: http://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash
log_bash_persistent_history()
{
  [[
    $(HISTTIMEFORMAT="%Y-%m-%d %T " history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]
  then
    echo $date_part "|" "$command_part" >> ~/.persistent_history
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}

# Stuff to do on PROMPT_COMMAND
run_on_prompt_command()
{
    log_bash_persistent_history
}

export PROMPT_COMMAND="run_on_prompt_command"

if [ -f "$HOME/.bashrc_local" ]; then
  source $HOME/.bashrc_local
fi
