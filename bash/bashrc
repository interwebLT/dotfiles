# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# force ignoredups and ignorespace
export HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
  else
    color_prompt=
  fi
fi

if [ "$color_prompt" = yes ]; then
  LIGHT_GREEN="\[\033[0;32m\]"
  if [ `/bin/hostname -s` = "hod" ] ; then
    export hcolor=$LIGHT_GREEN
  else
    export hcolor="\[\e[38;5;$((48 + $(hostname | cksum | cut -c1-3) % 170))m\]"
  fi
  PS1="$hcolor\h\[\033[00m\]:\w\$ "
else
    PS1='${debian_chroot:+($debian_chroot)}\h:\w\$ '
    #PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
fi
alias ll='ls -l --ignore=*.pyc'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

export PATH=$HOME/local/bin:$PATH
export HISTIGNORE="&:ls:ls -l"
export EDITOR=vim

if [ -f "$HOME/local/bin/virtualenvwrapper.sh" ]; then
    source $HOME/local/bin/virtualenvwrapper.sh
fi

if [ -f "/usr/local/bin/virtualenvwrapper.sh" ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi

#if [ -f /etc/bash_completion ] && shopt -oq posix; then
#  . /etc/bash_completion
#fi

# pip bash completion
_pip_completion()
{
    COMPREPLY=( $( COMP_WORDS="${COMP_WORDS[*]}" \
                   COMP_CWORD=$COMP_CWORD \
                   PIP_AUTO_COMPLETE=1 $1 ) )
}
complete -o default -F _pip_completion pip
# pip bash completion end

# set PYTHONSTARTUP
export PYTHONSTARTUP=$HOME/.pythonrc


# hostname completion
# from: http://www.commandlinefu.com/commands/view/2766/ssh-autocomplete
complete -W "$(echo $(grep '^ssh ' ~/.bash_history | sort -u | sed 's/^ssh //'))" ssh
# hostname completion end

# easy unpacking
unp() {
  if [ x == x$1 ]; then
    echo 'usage: unp [filename]'
  elif [ -f "$1" ]; then
    case "$1" in
      *.tar.gz) tar xvzf "$1" ;;
      *.tgz) tar xvzf "$1" ;;
      *.tar.bz2) tar xvjf "$1" ;;
      *.gz) gunzip "$1" ;;
      *.bz2) bunzip2 "$1" ;;
      *.tar) tar zvf "$1" ;;
      *.zip|*.egg|*.jar) unzip "$1" ;;
      *) echo "'$1' is an unknown archive" ;;
    esac
  else
    echo "'$1' is not a valid archive"
  fi
}

check_distro() {
  if [ -f "/usr/bin/lsb_release" ]; then
    lsb_release -ds
  else
    cat /etc/*release
  fi
  uname -m
}

if [ -f "$HOME/.bashrc_local" ]; then
  source $HOME/.bashrc_local
fi
