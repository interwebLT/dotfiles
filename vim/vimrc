set nocompatible
filetype off

" Bundle init from github.com/hinrik/dotfiles
" Download vundle
if !isdirectory(expand("~/.vim/bundle/vundle"))
    !mkdir -p ~/.vim/bundle
    !git clone git://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
    let s:bootstrap=1
endif

" Load bundles with vundle
set runtimepath+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

Bundle 'tpope/vim-markdown'
Bundle 'kien/ctrlp.vim'
Bundle 'lepture/vim-jinja'

" Bootstrap vundle
if exists("s:bootstrap") && s:bootstrap
    unlet s:bootstrap
    BundleInstall
endif

syntax on
filetype plugin indent on

" Indenting
set tabstop=2
set shiftwidth=2
set autoindent
set expandtab
set smarttab

set cursorline
set visualbell
set title
set titleold="Terminal"
set number
set showcmd

set wrap
set textwidth=78

" from http://github.com/mitsuhiko/dotfiles/blob/master/vim/vimrc
" sets leader to ','
let mapleader=","

" customize the wildmenu
set wildmenu
set wildignore=*.o,*.pyc,*.bak,*.jpg,*.jpeg,*.png,*.giv
set wildmode=list:full

" hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" Make the command line two lines high and change the statusline display to
" something that looks useful.
set cmdheight=2
set laststatus=2
set showcmd

" keep more lines for scope
set scrolloff=4

" better search
set hlsearch
set incsearch

" Highlight trailing whitespace
" From http://vim.wikia.com/wiki/Highlight_unwanted_spaces dfsldkj
highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
augroup WhitespaceMatch
  " Remove ALL autocommands for the WhitespaceMatch group.
  autocmd!
  autocmd BufWinEnter * let w:whitespace_match_number = matchadd('ExtraWhitespace', '\s\+$')
  autocmd InsertEnter * call s:ToggleWhitespaceMatch('i')
  autocmd InsertLeave * call s:ToggleWhitespaceMatch('n')
augroup END
function! s:ToggleWhitespaceMatch(mode)
  let pattern = (a:mode == 'i') ? '\s\+\%#\@<!$' : '\s\+$'
  if exists('w:whitespace_match_number')
    call matchdelete(w:whitespace_match_number)
    call matchadd('ExtraWhitespace', pattern, 10, w:whitespace_match_number)
  else
    " Something went wrong, try to be graceful.
    let w:whitespace_match_number =  matchadd('ExtraWhitespace', pattern)
  endif
endfunction

" Highlight non-ascii characters (i.e., outside the range from ' ' (space)
" to tilde) ☃✈‽‘’☣
highlight NonASCII ctermfg=gray ctermbg=darkblue
autocmd BufWinEnter * call matchadd('NonASCII', '[^\ -~]')

" Remove trailing whitespace on save (for source files)
" from http://stackoverflow.com/q/356126
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,css,erb,html,java,javascript,php,python,rst,ruby,tex,text autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

au BufNewFile,BufRead *.wsgi setf python
au FileType css setlocal tabstop=4
au FileType java setlocal tabstop=8
au FileType vim setlocal expandtab shiftwidth=2 tabstop=8 softtabstop=2
au FileType tex setlocal textwidth=80
